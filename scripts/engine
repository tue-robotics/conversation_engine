#!/usr/bin/env python

import rospy
from robocup_knowledge import knowledge_loader
from conversation_engine import ConversationEngineUsingTopic


def main():
    robot = rospy.get_param("~robot")  # Robot name to use as a namespace for the action client
    grammar = rospy.get_param("~grammar", None)  # String with the grammar to be used
    command_target = rospy.get_param("~command_target", None)  # Node of the grammar tree to parse up to.
    challenge = rospy.get_param("~challenge",
                                None)  # Challenge to load grammar and command_target from if `grammar` and `command_target` are empty

    # Which grammar target to use for what field of missing information?
    grammar_target_for_missing_info = rospy.get_param("~grammar_target_for_missing_info", {})

    default_grammar_target_for_missing_info = {
        'location': 'ROOM_OR_LOCATION',
        'entity': 'ROOM_OR_LOCATION',
        'target': 'NAMED_PERSON',
        'sentence': 'SAY_SENTENCE',
        'object': 'NAMED_OBJECT',
    }

    if grammar and command_target and challenge:
        rospy.logfatal("Specify either `grammar` and `command_target` or only `challenge`, not all three")
        return

    if grammar and command_target:
        rospy.loginfo("command_target: '{}'".format(command_target))
        rospy.loginfo("grammar: '{}'".format(grammar[:10]))
        rospy.loginfo("grammar_target_for_missing_info: '{}'".format(grammar_target_for_missing_info))
    else:
        if not command_target:
            rospy.logfatal("No command_target specified. This specifies the root of the grammar tree")
        if not grammar:
            rospy.logfatal("No grammar specified. This defined the grammar tree")
        if not grammar_target_for_missing_info:
            rospy.logfatal("No grammar_target_for_missing_info specified. "
                           "This mapping is used to map missing info fields to "
                           "grammar targets that can fill in that field")
        if not command_target or not grammar or not grammar_target_for_missing_info:
            return

    if challenge:
        rospy.loginfo("Loading grammar and target from challenge '{}'".format(challenge))
        knowledge = knowledge_loader.load_knowledge(challenge)
        try:
            grammar = knowledge.grammar
        except Exception as e:
            rospy.logfatal("Failed to load grammar from challenge: %s", e)
            return

        try:
            grammar_target_for_missing_info = knowledge.grammar_target_for_missing_info
        except AttributeError:
            rospy.logwarn("Using default grammar_target_for_missing_info. Should be specified in challenge knowledge")
            grammar_target_for_missing_info = default_grammar_target_for_missing_info

        command_target = knowledge.grammar_target

    rospy.loginfo("Starting conversation engine with robot {}".format(robot))
    ConversationEngineUsingTopic(robot,
                                 grammar,
                                 command_target=command_target,
                                 grammar_target_for_missing_info=grammar_target_for_missing_info)

    rospy.loginfo("Conversation engine started")
    rospy.spin()

if __name__ == "__main__":
    rospy.init_node("conversation_engine")
    main()
